# -*- coding: utf-8 -*-
"""HA1_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdy0hHYabHdriATL9ENLhGXhEewzfd3f
"""

import tensorflow as tf

"""1. creating a random tansor names randTensor of shape (4, 6) with integer values between 0 and 10 with integer data type (int32)
2. using tf.random.uniform to generate uniformly generated integers.
"""

randTensor = tf.random.uniform(shape = (4, 6), minval = 0, maxval = 10, dtype = tf.int32)

"""3. Getting the rank ( dimension ) and shape of the original tensor (randTensor) (tf.rank returns the rank and .shape gives us the shape of the tensor)"""

randTensorRank = tf.rank(randTensor).numpy()
randTensorShape = randTensor.shape

"""4. Printing the rank and shape of the original tensor (randTensor)"""

print(f"Original Rank: {randTensorRank}, Original Shape: {randTensorShape}")

"""5. reshaping the tensor shape from (4, 6) to (2, 3, 4) using tf.reshape to get this, reshaping changes the structurer of the tensor without altering its data. using tf.rank and .shape to get the rank and shape of the modified tensor"""

reshapedTensor = tf.reshape(randTensor, (2, 3, 4))
reshapedTensorRank = tf.rank(reshapedTensor).numpy()
reshapedTensorShape = reshapedTensor.shape

"""6. Printing the rank and shape of the modified/reshaped tensor"""

print(f"Reshaped Rank: {reshapedTensorRank}, Reshaped Shape: {reshapedTensorShape}")

"""7. Transpose the reshaped tensor from shape (2, 3, 4) to (3, 2, 4), swaps the axes of the tensor according to the specified permutation. Here, perm=[1, 0, 2] swaps the first and second axes"""

transposedTensor = tf.transpose(reshapedTensor, perm=[1, 0, 2])
transposedRank = tf.rank(transposedTensor).numpy()
transposedShape = transposedTensor.shape

"""8. printing the rank and shape of the modified tensor"""

print(f"Transposed Rank: {transposedRank}, Transposed Shape: {transposedShape}")

"""9. creating a smaller tensor of shape (1, 4) with minimum value and maximum values are ste to 0 and 10 respectively, we will broadcast this tensor to match the shape of the transposed tensor"""

smallTensor = tf.random.uniform(shape=(1, 4), minval=0, maxval=10, dtype=tf.int32)

"""10. Performing broadcasting and addition, which automatically expands the smaller tensor to match the shape of the larger tensor.
11. Here, small_tensor (1, 4) is broadcasted to (3, 2, 4) and added to transposed_tensor (3, 2, 4)
"""

broadcastedSum = transposedTensor + smallTensor

"""12. verify the shape after broadcasting and addition of the smaller tensor"""

print(f"Shape after Broadcasting and Addition: {broadcastedSum.shape}")

"""Broadcasting in TensorFlow, allows TensorFlow to perform element-wise operations on tensors of different shapes, automatically expands the smaller tensor by adding dimensions of size 1 starting from the left and then replicates the values along those dimensions to match the larger tensor's shape.

Ex: a tensor of shape (1, 4) is broadcasted to (3, 2, 4) by expanding dimensions to (1, 1, 4) and then replicating along the first and second dimensions to match (3, 2, 4).
"""